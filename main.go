package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/gertd/go-pluralize"
	"github.com/jessevdk/go-flags"
)

type options struct {
	Module  string `short:"m" long:"module" description:"Module name" required:"true"`
	Project string `short:"p" long:"project" description:"Project name" required:"true"`
	Entity  string `short:"e" long:"entity" description:"Entity name" required:"true"`
}

const templateStr = `
// Code generated by db-gen; DO NOT EDIT.

package db

import (
	"{{ .Module }}/backend/entities"
	"errors"
	"log"

	"github.com/jinzhu/copier"
	"github.com/twharmon/slices"
	"gorm.io/gorm"

	"{{ .Module }}/backend/{{ .Project }}"
)

func FindAll{{ .EntitiesUcFirst }}() ([]entities.{{ .EntityUcFirst }}, error) {
	var {{ .Entities }} []{{ .EntityUcFirst }}
	if err := DB.Find(&{{ .Entities }}).Error; err != nil {
		log.Println("Error in db.FindAll{{ .EntitiesUcFirst }}:", err)
		return []entities.{{ .EntityUcFirst }}{}, {{ .Project }}.ErrSomethingWentWrong
	}
	return slices.Map({{ .Entities }}, func({{ .Entity }} {{ .EntityUcFirst }}) entities.{{ .EntityUcFirst }} {
		var entities{{ .Entity }} entities.{{ .EntityUcFirst }}
		copier.Copy(&entities{{ .Entity }}, &{{ .Entity }})
		return entities{{ .Entity }}
	}), nil
}

func Find{{ .EntityUcFirst }}ByID({{ .Entity }} *entities.{{ .EntityUcFirst }}) error {
	var {{ .Entity }}DB {{ .EntityUcFirst }}
	if err := DB.First(&{{ .Entity }}DB, {{ .Entity }}.ID).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return {{ .Project }}.ErrEntityNotFound
		}
		log.Println("Error in db.Find{{ .EntityUcFirst }}ByID:", err)
		return {{ .Project }}.ErrSomethingWentWrong
	}
	copier.Copy(&{{ .Entity }}, &{{ .Entity }}DB)
	return nil
}

func Insert{{ .EntityUcFirst }}({{ .Entity }} *entities.{{ .EntityUcFirst }}) error {
	var {{ .Entity }}DB {{ .EntityUcFirst }}
	copier.Copy(&{{ .Entity }}DB, &{{ .Entity }})
	if err := DB.Create(&{{ .Entity }}DB).Error; err != nil {
		log.Println("Error in db.Insert{{ .EntityUcFirst }}:", err)
		return {{ .Project }}.ErrSomethingWentWrong
	}
	copier.Copy(&{{ .Entity }}, &{{ .Entity }}DB)
	return nil
}

func Save{{ .EntityUcFirst }}({{ .Entity }} *entities.{{ .EntityUcFirst }}) error {
	var {{ .Entity }}DB {{ .EntityUcFirst }}
	copier.Copy(&{{ .Entity }}DB, &{{ .Entity }})
	if err := DB.Save(&{{ .Entity }}DB).Error; err != nil {
		log.Println("Error in db.Save{{ .EntityUcFirst }}:", err)
		return {{ .Project }}.ErrSomethingWentWrong
	}
	copier.Copy(&{{ .Entity }}, &{{ .Entity }}DB)
	return nil
}

func Delete{{ .EntityUcFirst }}({{ .Entity }} *entities.{{ .EntityUcFirst }}) error {
	var {{ .Entity }}DB {{ .EntityUcFirst }}
	copier.Copy(&{{ .Entity }}DB, &{{ .Entity }})
	if err := DB.Delete(&{{ .Entity }}DB).Error; err != nil {
		log.Println("Error in db.Delete{{ .EntityUcFirst }}:", err)
		return {{ .Project }}.ErrSomethingWentWrong
	}
	return nil
}
`

func main() {
	var opts options
	parser := flags.NewParser(&opts, flags.Default)
	if _, err := parser.Parse(); err != nil {
		return
	}

	entity := opts.Entity
	entityUcFirst := upperFirst(entity)
	entities := pluralize.NewClient().Plural(entity)
	entitiesUcFirst := upperFirst(entities)

	KVs := map[string]string{
		"Entity":          entity,
		"Entities":        entities,
		"EntityUcFirst":   entityUcFirst,
		"EntitiesUcFirst": entitiesUcFirst,
		"Project":         opts.Project,
		"Module":          opts.Module,
	}
	fileContent := templateStr
	for key, value := range KVs {
		fileContent = strings.ReplaceAll(fileContent, fmt.Sprintf("{{ .%s }}", key), value)
	}
	fileName := "./db/" + entity + "_repo.go"
	file, err := os.Create(fileName)
	if err != nil {
		log.Fatal("Error creating file:", err)
	}
	defer file.Close()
	if _, err := file.WriteString(fileContent); err != nil {
		log.Fatal("Error writing file:", err)
	}
}

func upperFirst(s string) string {
	if len(s) == 0 {
		return ""
	}
	return strings.ToUpper(s[:1]) + s[1:]
}
